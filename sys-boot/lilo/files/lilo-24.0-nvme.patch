diff -Naurp a/src/common.h b/src/common.h
--- a/src/common.h	2018-04-04 14:38:45.358258504 +0200
+++ b/src/common.h	2018-04-04 14:37:48.198259189 +0200
@@ -383,7 +383,7 @@ extern char *config_file;
 extern FILE *errstd;
 extern FILE *pp_fd;
 extern char *identify;	/* in identify.c */
-extern int dm_major_list[16];
+extern int dm_major_list[32];
 extern int dm_major_nr;
 
 #define crc(a,b) (~crc32((a),(b),CRC_POLY1))
diff -Naurp a/src/geometry.c b/src/geometry.c
--- a/src/geometry.c	2018-04-04 14:39:02.798258295 +0200
+++ b/src/geometry.c	2018-04-04 14:37:53.398259127 +0200
@@ -84,8 +84,9 @@ DM_TABLE *dmtab = NULL;
 int dm_version_nr = 0;
 #endif
 
-int dm_major_list[16];
+int dm_major_list[32]; /* increased from 16 to allow for nvme disks */
 int dm_major_nr;
+int nvme_pr = 0; /* set to none zero after geo_init if nvme disk present */
 
 #ifdef LCF_LVM
 struct lv_bmap {
@@ -200,6 +201,9 @@ void geo_init(char *name)
 
     while(fgets(line, (sizeof line)-1, file)) {
 	if (sscanf(line, "%d %31s\n", &major, major_name) != 2) continue;
+	if (strcmp(major_name, "nvme") != 0) { /* set if nvme drive is present */
+	    nvme_pr=-1;
+	}
 	if (strcmp(major_name, "device-mapper") != 0) continue;
 	dm_major_list[dm_major_nr] = major;
 	if (verbose >= 3) {
@@ -685,6 +689,20 @@ void geo_query_dev(GEOMETRY *geo,int dev
 	    geo->start = hdprm.start;
 	    break;
 	case MAJOR_SATA1:
+		/* check for nvme device and asume boot/this device is nvme if present */
+		if (nvme_pr != 0) {
+		    geo->device = 0x80 + last_dev(MAJOR_HD,64) + (MINOR(device) >> 4);
+		    if (!get_all) break;
+		    if (ioctl(fd,HDIO_GETGEO,&hdprm) < 0)
+			die("geo_query_dev HDIO_GETGEO (dev 0x%04x): %s",device,strerror(errno));
+		    if (all && !hdprm.sectors)
+			die("HDIO_REQ not supported for your NVME controller. Please use a DISK section");
+		    geo->heads = hdprm.heads;
+		    geo->cylinders = hdprm.cylinders;
+		    geo->sectors = hdprm.sectors;
+		    geo->start = hdprm.start;
+		    break;
+		}
 	case MAJOR_SATA2:
 		printf("WARNING: SATA partition in the high region (>15):\n");
 		printf("LILO needs the kernel in one of the first 15 SATA partitions. If \n");
diff -Naurp a/src/lilo.h b/src/lilo.h
--- a/src/lilo.h	2018-04-04 14:39:10.388258204 +0200
+++ b/src/lilo.h	2018-04-04 14:38:01.498259030 +0200
@@ -154,6 +154,7 @@
 
 /* high partitions (>15) on SATA hard disks */
 #define MAJOR_SATA1	259 /* high SATA disk partitions */
+			    /* also used by kernel for nvme disks */
 #define MAJOR_SATA2	260 /* high SATA disk partitions */
 
 #define MAX_TOKEN	1023 /* max device Token length */
